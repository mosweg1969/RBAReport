#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------------------------------------------------------------------------------------------- #
#   General routines that are dictionary related
# ------------------------------------------------------------------------------------------------------------------------------------------------------- #

def sortDictionary(dDict) -> dict:
    # --------------------------------------------------------------------------------------------------------------------------------------------------- #
    #   Sort the dictionary in ascending key order, returns a new dictionary
    # --------------------------------------------------------------------------------------------------------------------------------------------------- #
    dSorted = {}
    lKeyList = list(dDict)
    lKeyList.sort()
    for sKey in lKeyList:
        dSorted[sKey] = dDict[sKey]
    return dSorted


def checkDictEntry(dDict, oKey, oValue) -> bool:
    # -------------------------------------------------------------------------------------------------------------------------------------------------- #
    #   Return bool if 'oKey' is in the dictionary and if it equals 'oValue'
    # --------------------------------------------------------------------------------------------------------------------------------------------------- #
    if oKey in dDict:
        return dDict[oKey] == oValue
    return False


def popDictFields(dDict, lKeys) -> None:
    # --------------------------------------------------------------------------------------------------------------------------------------------------- #
    #   If they are present, remove all keys from the 'lKeys' list from 'dDict'
    # --------------------------------------------------------------------------------------------------------------------------------------------------- #
    for sKey in lKeys:
        if sKey in dDict:
            dDict.pop(sKey)


def replaceSingleQuotesInDict(dDict: dict) -> None:
    # --------------------------------------------------------------------------------------------------------------------------------------------------- #
    #   For every item in the dictionary, replace all single quotes with two single quotes.
    #   This is needed if the values are going to be written to a database.
    # --------------------------------------------------------------------------------------------------------------------------------------------------- #
    for sKey, sValue in dDict.items():
        if type(sValue) is str:
            dDict[sKey] = sValue.replace("'", "''")


class DictCounter:
    # --------------------------------------------------------------------------------------------------------------------------------------------------- #
    #   Custom class for counting values and returning the most popular one.
    # --------------------------------------------------------------------------------------------------------------------------------------------------- #
    def __init__(self):
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        #   Instantiate the class object and set up an empty dictionary object to hold values
        # ---------------------------------------------------------------------------------------------------------------------------------------------- #
        self.dictValues = {}

    def addValue(self, oValue: any):
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        #   Add a value into the dictionary counter object, if it's already been seen increment the count, otherwise set the count to 1.
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        if oValue in self.dictValues:
            self.dictValues[oValue] += 1

        else:
            self.dictValues[oValue] = 1

    def mostPopular(self) -> tuple[any, int]:
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        #   Returns a tuple with (value, highest count) or (None, 0) if there were no items to count
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        iHighestCount = 0
        oHighestValue = None
        for oKey, iCount in self.dictValues.items():
            if iCount > iHighestCount:
                oHighestValue, iHighestCount = oKey, iCount

        return oHighestValue, iHighestCount

    def count(self) -> int:
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        #   Returns the number of unique keys in the dictionary
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        return len(self.dictValues)

    def countOf(self, oValue: any) -> int:
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        #   Returns the count for the specified key, 0 otherwise
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        return self.dictValues.get(oValue, 0)

    def dump(self) -> None:
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        #   Dump the contents of the dictionary
        # ----------------------------------------------------------------------------------------------------------------------------------------------- #
        for key, value in self.dictValues.items():
            print(key, value)
